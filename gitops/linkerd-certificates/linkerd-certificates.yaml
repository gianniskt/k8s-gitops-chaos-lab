# Linkerd Certificate Management Configuration
# This file sets up the complete certificate infrastructure for Linkerd service mesh mTLS
# It creates a root CA (trust anchor) and intermediate CA (identity issuer) hierarchy
# that Linkerd uses to issue certificates to proxy sidecars for secure communication

---
# Root Certificate Authority (CA) for Linkerd
# This ClusterIssuer creates self-signed certificates that serve as the root of trust
# for the entire Linkerd service mesh. All other certificates in the mesh are signed
# by certificates that ultimately chain back to this root CA.
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: linkerd-ca
spec:
  selfSigned: {}

---
# Trust Anchor Certificate - Root CA Certificate
# This is the foundational certificate that establishes the root of trust for Linkerd.
# - isCA: true - This certificate can sign other certificates
# - commonName: Identifies this as the root CA for the cluster
# - secretName: Where the certificate and private key are stored
# - issuerRef: References the self-signed issuer above
# - duration: 1 year validity (8760 hours)
# - renewBefore: Renew 30 days before expiration
# - privateKey: Uses ECDSA with P-256 curve for modern security
# - rotationPolicy: Always rotate private keys for security
# - usages: Allows this CA to sign certificates and CRLs
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: linkerd-trust-anchor
  namespace: linkerd
spec:
  isCA: true
  commonName: root.linkerd.cluster.local
  secretName: linkerd-trust-anchor
  issuerRef:
    name: linkerd-ca
    kind: ClusterIssuer
  subject:
    organizationalUnits:
      - linkerd
  duration: 8760h # 1 year
  renewBefore: 720h # 30 days
  privateKey:
    algorithm: ECDSA
    size: 256
    rotationPolicy: Always
  usages:
    - cert sign
    - crl sign
    - digital signature
    - key encipherment

---
# Trust Anchor Issuer - Allows certificates to be signed by the trust anchor
# This Issuer references the trust anchor certificate above and allows
# cert-manager to issue certificates signed by the root CA.
# This is used to create the intermediate identity issuer certificate.
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: linkerd-trust-anchor-issuer
  namespace: linkerd
spec:
  ca:
    secretName: linkerd-trust-anchor

---
# Identity Issuer Certificate - Intermediate CA for proxy certificates
# This is an intermediate Certificate Authority that Linkerd's identity controller
# uses to sign certificates for individual proxy sidecars.
# - Shorter lifetime (30 days) than root CA for better security
# - Signed by the trust anchor (root CA) creating a proper CA hierarchy
# - Used by Linkerd to issue certificates to service proxies on-demand
# - The identity controller automatically rotates these certificates
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: linkerd-identity-issuer
  namespace: linkerd
spec:
  isCA: true
  commonName: identity.linkerd.cluster.local
  secretName: linkerd-identity-issuer
  issuerRef:
    name: linkerd-trust-anchor-issuer
    kind: Issuer
  subject:
    organizationalUnits:
      - linkerd
  duration: 720h # 30 days
  renewBefore: 168h # 7 days
  privateKey:
    algorithm: ECDSA
    size: 256
    rotationPolicy: Always
  usages:
    - cert sign
    - crl sign
    - digital signature
    - key encipherment

---
# Service Account for Trust Synchronization
# This service account is used by the trust sync job to access and modify
# Kubernetes resources (secrets, configmaps, certificates) needed to keep
# Linkerd's trust configuration synchronized with cert-manager certificates.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: linkerd-trust-sync
  namespace: linkerd

---
# RBAC Role for Trust Synchronization
# Grants permissions to read/write secrets and configmaps, and read certificates.
# This allows the trust sync job to:
# - Access certificate secrets created by cert-manager
# - Read and update the linkerd-identity-trust-roots ConfigMap
# - Monitor certificate status for readiness checks
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: linkerd-trust-sync
  namespace: linkerd
rules:
- apiGroups: [""]  # Core API group
  resources: ["secrets", "configmaps"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
- apiGroups: ["cert-manager.io"]
  resources: ["certificates"]
  verbs: ["get", "list", "watch"]

---
# Role Binding for Trust Synchronization
# Binds the trust-sync role to the trust-sync service account,
# allowing the job to perform necessary operations.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-trust-sync
  namespace: linkerd
roleRef:
  kind: Role
  name: linkerd-trust-sync
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: linkerd-trust-sync
  namespace: linkerd

---
# Trust Anchor Synchronization Job
# This job runs once after Linkerd deployment to synchronize the trust anchor
# ConfigMap with the certificate data from cert-manager.
#
# Why this is needed:
# - Linkerd Helm chart creates an empty linkerd-identity-trust-roots ConfigMap
# - cert-manager creates certificates asynchronously after Linkerd deployment
# - This job waits for certificates to be ready, then populates the ConfigMap
# - The populated ConfigMap is used by Linkerd proxies to validate certificates
#
# How it works:
# 1. Waits for Linkerd to create the ConfigMap
# 2. Waits for certificates to be ready
# 3. Extracts the CA certificate from the identity issuer secret
# 4. Updates the ConfigMap's ca-bundle.crt field
# 5. Adds reloader annotation to trigger proxy restarts
apiVersion: batch/v1
kind: Job
metadata:
  name: linkerd-trust-sync-initial
  namespace: linkerd
spec:
  template:
    spec:
      containers:
      - name: trust-sync
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Starting trust anchor ConfigMap fix..."
          
          # Wait for the ConfigMap to exist (created by Linkerd Helm chart)
          while ! kubectl get configmap linkerd-identity-trust-roots -n linkerd >/dev/null 2>&1; do
            echo "Waiting for linkerd-identity-trust-roots ConfigMap to be created by Linkerd..."
            sleep 5
          done
          
          # Wait for certificates to be ready
          kubectl wait --for=condition=Ready certificate/linkerd-trust-anchor -n linkerd --timeout=300s
          kubectl wait --for=condition=Ready certificate/linkerd-identity-issuer -n linkerd --timeout=300s
          
          # Get the CA certificate from the identity issuer secret (intermediate CA)
          CA_CERT=$(kubectl get secret linkerd-identity-issuer -n linkerd -o jsonpath='{.data.tls\.crt}' | base64 -d)
          
          if [ -z "$CA_CERT" ]; then
            echo "ERROR: Could not retrieve CA certificate from linkerd-identity-issuer secret"
            exit 1
          fi
          
          echo "Retrieved CA certificate, updating ConfigMap ca-bundle.crt field..."
          
          # Use kubectl to update the ca-bundle.crt field with proper escaping
          kubectl get configmap linkerd-identity-trust-roots -n linkerd -o json | \
            jq --arg cert "$CA_CERT" '.data["ca-bundle.crt"] = $cert' | \
            kubectl apply -f -
          
          # Add reloader annotation if not present
          kubectl annotate configmap linkerd-identity-trust-roots -n linkerd \
            reloader.stakater.com/match="true" --overwrite
          
          echo "Trust anchor ConfigMap updated successfully"
          echo "ca-bundle.crt field is now populated with the identity issuer certificate"
      restartPolicy: OnFailure
      serviceAccountName: linkerd-trust-sync